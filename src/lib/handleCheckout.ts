import { supabase } from './supabase';
import { CartItem } from '../types/supabase';

export async function handleCheckout(userId: string, items: CartItem[]) {
  
  console.log('üß™ handleCheckout –∑–∞–ø—É—Å—Ç–∏–ª—Å—è');
  if (!items.length) {
    throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ–ª—å–∑—è –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
  }

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
  const total_price = items.reduce((sum, item) => {
    const price = typeof item.price === 'number' ? item.price : 0;
    return sum + price * item.quantity;
  }, 0);
const {
  data: { user },
  error: userError,
} = await supabase.auth.getUser();

if (userError || !user) {
  throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
}

console.log('auth.uid():', user.id);
  // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
const { data: orderData, error: orderError } = await supabase
  .from('orders')
  .insert([{ user_id: user.id, total_price }])
  .select()
  .single();

console.log('order.user_id:', orderData.user_id);

  if (orderError || !orderData) {
    throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ' + orderError?.message);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
for (const item of items) {
  const isBuild = !!item.isBuild; // —Å—Ç—Ä–æ–≥–æ–µ –±—É–ª–µ–≤–æ

const payload = {
  order_id: orderData.id,
  quantity: item.quantity,
  price: item.price * item.quantity,
  unit_price: item.price,
  product_id: isBuild ? null : item.id,
  build_id: isBuild ? item.id : null,
};

// üîç –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID —Å–±–æ—Ä–∫–∏
if (isBuild && (!item.id || typeof item.id !== 'string')) {
  console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–±–æ—Ä–∫–∏:', item);
  throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–±–æ—Ä–∫–∏');
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
if (!payload.product_id && !payload.build_id) {
  throw new Error('‚ùå –ù–∏ product_id, –Ω–∏ build_id –Ω–µ –∑–∞–¥–∞–Ω—ã!');
}
}

  return orderData.id;
}